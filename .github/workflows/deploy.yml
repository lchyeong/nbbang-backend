name: Docker-based Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Deploy to Server via SSH and Build Docker Image
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem -tt $USERNAME@$HOST <<EOF
            # 서버로 이동 후 작업 디렉토리 설정
            cd /var/www/nbbang-be

            # 최신 코드 업데이트
            git pull origin main

            # Docker 이미지를 빌드하고 Docker Hub에 푸시
            docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/nbbang:latest --push .

            # 새로운 컨테이너 실행 (임시 포트 사용)
            docker run -d -p 8081:8080 --name nbbang_temp --env-file /var/www/nbbang-be/.env ${{ secrets.DOCKER_HUB_USERNAME }}/nbbang:latest

            # 컨테이너 상태 확인
            CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' nbbang_temp)

            if [ "\$CONTAINER_STATUS" != "running" ]; then
              echo "nbbang_temp 컨테이너가 시작되지 않음. 상태: \$CONTAINER_STATUS"
              docker logs nbbang_temp || true
              docker rm -f nbbang_temp || true
              echo "New container failed to start, rollback to the existing one"
              exit 1
            fi

            # 기존 컨테이너 중지 및 제거 후 새로운 컨테이너 적용
            if [ "$(docker ps -q -f name=nbbang)" ]; then
              docker stop nbbang
              docker rm nbbang
            fi

            docker rename nbbang_temp nbbang
            docker update --restart always nbbang
          EOF
          rm private_key.pem
